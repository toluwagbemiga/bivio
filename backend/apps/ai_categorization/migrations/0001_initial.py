# Generated by Django 5.2.6 on 2025-10-05 14:43

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryPrediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('input_text', models.TextField(help_text='Original text input by user (product name, description, etc.)')),
                ('preprocessed_text', models.TextField(blank=True, help_text='Cleaned and preprocessed text for ML model')),
                ('confidence_score', models.FloatField(help_text='AI confidence score (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('alternative_predictions', models.JSONField(blank=True, default=list, help_text='List of alternative category predictions with scores')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('accepted', 'Accepted by User'), ('rejected', 'Rejected by User'), ('auto_applied', 'Auto-applied')], default='pending', max_length=20)),
                ('user_feedback', models.TextField(blank=True)),
                ('model_version', models.CharField(default='v1.0', help_text='Version of ML model used for prediction', max_length=50)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, help_text='Time taken for prediction in milliseconds', null=True)),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional context (user history, location, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category Prediction',
                'verbose_name_plural': 'Category Predictions',
                'db_table': 'category_predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_version', models.CharField(max_length=50)),
                ('model_type', models.CharField(default='category_classifier', help_text='Type of model (category_classifier, fraud_detection, etc.)', max_length=50)),
                ('accuracy', models.FloatField(help_text='Overall accuracy score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision', models.FloatField(help_text='Precision score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall', models.FloatField(help_text='Recall score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('f1_score', models.FloatField(help_text='F1 score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confusion_matrix', models.JSONField(default=dict, help_text='Confusion matrix for detailed analysis')),
                ('class_metrics', models.JSONField(default=dict, help_text='Per-class precision, recall, f1-score')),
                ('training_samples', models.PositiveIntegerField(help_text='Number of samples used for training')),
                ('validation_samples', models.PositiveIntegerField(help_text='Number of samples used for validation')),
                ('training_time_seconds', models.PositiveIntegerField(help_text='Time taken to train model in seconds')),
                ('is_deployed', models.BooleanField(default=False)),
                ('deployed_at', models.DateTimeField(blank=True, null=True)),
                ('hyperparameters', models.JSONField(default=dict, help_text='Model hyperparameters used')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Model Performance',
                'verbose_name_plural': 'Model Performance',
                'db_table': 'model_performance',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text_input', models.TextField(help_text='Original text (product names, descriptions, local names)')),
                ('processed_text', models.TextField(blank=True, help_text='Cleaned and normalized text')),
                ('source', models.CharField(choices=[('user_input', 'Direct User Input'), ('transaction', 'Transaction Data'), ('inventory', 'Inventory Data'), ('feedback', 'User Feedback'), ('manual', 'Manual Entry'), ('bulk_import', 'Bulk Import')], default='user_input', max_length=20)),
                ('language', models.CharField(default='en', help_text='Language of the text (en, ha, ig, yo, pidgin)', max_length=20)),
                ('region', models.CharField(blank=True, help_text='Nigerian region/state where this term is common', max_length=50)),
                ('is_validated', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(blank=True, help_text='Quality score for this training example', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='How many times this data point has been used in training')),
                ('status', models.CharField(choices=[('raw', 'Raw Data'), ('processed', 'Processed'), ('validated', 'Validated'), ('used_for_training', 'Used for Training'), ('discarded', 'Discarded')], default='raw', max_length=20)),
                ('features', models.JSONField(blank=True, default=dict, help_text='Additional features for ML (price range, context, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Training Data',
                'verbose_name_plural': 'Training Data',
                'db_table': 'training_data',
                'ordering': ['-created_at'],
            },
        ),
    ]
