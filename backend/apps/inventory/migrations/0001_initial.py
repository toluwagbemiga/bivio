# Generated by Django 5.2.6 on 2025-10-05 14:43

import django.core.validators
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('product_type', models.CharField(choices=[('goods', 'Physical Goods'), ('services', 'Services'), ('digital', 'Digital Products')], default='goods', max_length=20)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit - auto-generated if empty', max_length=100)),
                ('barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('cost_price', models.DecimalField(decimal_places=2, help_text='Cost price per unit in Naira', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Selling price per unit in Naira', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('current_stock', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('minimum_stock_level', models.DecimalField(decimal_places=2, default=0, help_text='Alert when stock falls below this level', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('maximum_stock_level', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum stock to maintain', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('unit_of_measurement', models.CharField(choices=[('pieces', 'Pieces'), ('kg', 'Kilograms'), ('liters', 'Liters'), ('meters', 'Meters'), ('packs', 'Packs'), ('cartons', 'Cartons'), ('bottles', 'Bottles'), ('bags', 'Bags'), ('rolls', 'Rolls'), ('hours', 'Hours'), ('days', 'Days')], default='pieces', max_length=20)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('manufacturer', models.CharField(blank=True, max_length=200)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('local_names', models.TextField(blank=True, help_text='Local names for this product (Hausa, Igbo, Yoruba, Pidgin)')),
                ('supplier_name', models.CharField(blank=True, max_length=200)),
                ('supplier_phone', models.CharField(blank=True, max_length=15)),
                ('total_sold', models.DecimalField(decimal_places=2, default=0, help_text='Total quantity sold', max_digits=10)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, help_text='Total revenue generated from this product', max_digits=15)),
                ('last_sold_date', models.DateTimeField(blank=True, null=True)),
                ('last_restocked_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('track_inventory', models.BooleanField(default=True, help_text='Whether to track inventory for this product')),
                ('allow_negative_stock', models.BooleanField(default=False, help_text='Allow sales even when stock is zero')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category_type', models.CharField(choices=[('food_beverages', 'Food & Beverages'), ('electronics', 'Electronics'), ('clothing', 'Clothing & Fashion'), ('household', 'Household Items'), ('cosmetics', 'Cosmetics & Personal Care'), ('stationery', 'Stationery & Office'), ('pharmacy', 'Pharmacy & Health'), ('services', 'Services'), ('airtime_data', 'Airtime & Data'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('keywords', models.TextField(blank=True, help_text='Comma-separated keywords for AI categorization')),
                ('local_names', models.TextField(blank=True, help_text='Local/Pidgin names for products in this category')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'db_table': 'product_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('movement_type', models.CharField(choices=[('purchase', 'Purchase/Restock'), ('sale', 'Sale'), ('return', 'Return'), ('adjustment', 'Stock Adjustment'), ('damage', 'Damage/Loss'), ('transfer', 'Transfer')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per unit for this movement', max_digits=15, null=True)),
                ('stock_before', models.DecimalField(decimal_places=2, max_digits=10)),
                ('stock_after', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Stock Movement',
                'verbose_name_plural': 'Stock Movements',
                'db_table': 'stock_movements',
                'ordering': ['-created_at'],
            },
        ),
    ]
