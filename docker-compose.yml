version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: pos_financial_db
      POSTGRES_USER: pos_user
      POSTGRES_PASSWORD: pos_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pos_user -d pos_financial_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Django backend
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://pos_user:pos_password@postgres:5432/pos_financial_db
      - REDIS_URL=redis://redis:6379/0
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # AI Services
  ai_services:
    build:
      context: .
      dockerfile: Dockerfile.ai
    ports:
      - "8001:8001"
    volumes:
      - ./ai_services:/app
    environment:
      - DEBUG=1
      - MODEL_PATH=/app/models/
      - DATA_PATH=/app/data/

  # Web app (PWA)
  web_app:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./web_app:/app
      - /app/node_modules
    command: >
      sh -c "npm install &&
             npm run dev"
    depends_on:
      - backend

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - backend
      - ai_services
      - web_app

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
